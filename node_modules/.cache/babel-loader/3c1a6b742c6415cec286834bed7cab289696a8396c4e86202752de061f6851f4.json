{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"bg-black flex flex-col min-h-screen\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" Rest of your template code \")]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createCommentVNode"],"sources":["C:\\Users\\burge\\OneDrive\\Desktop\\mh_py\\frontend\\src\\components\\LandingPage.vue"],"sourcesContent":["<template>\r\n  <div class=\"bg-black flex flex-col min-h-screen\">\r\n    <!-- Rest of your template code -->\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport * as THREE from 'three';\r\nimport LoginView from '@/components/LoginView.vue';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      isLargeScreen: true,\r\n      hideBottomNav: false,\r\n      scrollTimer: null,\r\n      prevScrollY: 0,\r\n      showLoginModal: false,\r\n      cube: null,\r\n      renderer: null,\r\n      scene: null,\r\n    };\r\n  },\r\n  mounted() {\r\n    window.addEventListener('resize', this.handleScreenResize);\r\n    this.handleScreenResize();\r\n    window.addEventListener('scroll', this.handleScroll);\r\n\r\n    // Initialize the 3D scene\r\n    this.initScene();\r\n    // Start the animation loop\r\n    this.animate();\r\n  },\r\n  beforeUnmount() {\r\n    window.removeEventListener('resize', this.handleScreenResize);\r\n    window.removeEventListener('scroll', this.handleScroll);\r\n  },\r\n  methods: {\r\n    handleScreenResize() {\r\n      this.isLargeScreen = window.innerWidth >= 768 || window.scrollY === 0;\r\n      this.hideBottomNav = window.innerWidth >= 768 || window.scrollY === 0;\r\n    },\r\n    handleScroll() {\r\n      clearTimeout(this.scrollTimer);\r\n\r\n      if (window.pageYOffset > this.prevScrollY || window.innerWidth >= 768) {\r\n        // Scrolling down\r\n        this.hideBottomNav = true;\r\n      } else {\r\n        // Scrolling up\r\n        this.hideBottomNav = false;\r\n      }\r\n\r\n      if (window.scrollY === 0) {\r\n        // At top of page\r\n        this.hideBottomNav = true;\r\n      }\r\n\r\n      this.prevScrollY = window.pageYOffset;\r\n\r\n      // Set a timeout to hide the bottom nav after 5 seconds of scroll inactivity\r\n      this.scrollTimer = setTimeout(() => {\r\n        this.hideBottomNav = true;\r\n      }, 5000);\r\n    },\r\n    openLoginModal() {\r\n      this.showLoginModal = true;\r\n    },\r\n    closeLoginModal() {\r\n      this.showLoginModal = false;\r\n    },\r\n    initScene() {\r\n      // Create a scene\r\n      this.scene = new THREE.Scene();\r\n\r\n      // Create a cube geometry\r\n      const geometry = new THREE.BoxGeometry();\r\n      const material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });\r\n      const cube = new THREE.Mesh(geometry, material);\r\n      this.scene.add(cube);\r\n      this.cube = cube;\r\n\r\n      // ...\r\n    },\r\n    animate() {\r\n      requestAnimationFrame(this.animate);\r\n\r\n      if (window.scrollY > 0) {\r\n        // Calculate the rotation angles based on the scroll position\r\n        const rotationX = (window.scrollY / window.innerHeight) * Math.PI * 2;\r\n        const rotationY = (window.scrollY / window.innerHeight) * Math.PI * 2;\r\n\r\n        // Apply the rotation to the cube\r\n        this.cube.rotation.x = rotationX;\r\n        this.cube.rotation.y = rotationY;\r\n\r\n        // Render the scene\r\n        this.renderer.render(this.scene, this.camera);\r\n      }\r\n    }\r\n  },\r\n  components: {\r\n    LoginView\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\nhtml,\r\nbody {\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n\r\n.hidden {\r\n  display: none;\r\n}\r\n\r\n.animation-container {\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n</style>\r\n"],"mappings":";;EACOA,KAAK,EAAC;AAAqC;;uBAAhDC,mBAAA,CAEM,OAFNC,UAEM,GADJC,mBAAA,gCAAmC,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}